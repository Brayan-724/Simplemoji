import { ListView } from "std-widgets.slint";

import { MyColors } from "./globals.slint";
import { MyColors, MainState } from "./globals.slint";
import { FocusDirection, Navigation } from "./navigation.slint";

import { Emoji, EmojiModel, EmojiHandle } from "./components/emoji.slint";
import { Tabs, TabsHandle } from "./components/tab.slint";
import { Preview } from "./components/preview.slint";
import { Search, SearchGlobal, SkinTone } from "./components/search.slint";

export { MainState, MyColors, EmojiModel, EmojiHandle, FocusDirection, Navigation, SearchGlobal, SkinTone, TabsHandle }

export component MainWindow inherits Window {
    in property<[[EmojiModel]]> emojis: [];

    callback start(length, length);

    property<{ has: bool, content: EmojiModel }> emoji-preview;

    title: "Simplemoji";
    width: MainState.width;
    height: MainState.height;
    background: MyColors.background;

    no-frame: true;
    always-on-top: true;
    default-font-size: MainState.font-size;

    forward-focus: global-event;
    global-event := FocusScope {
        key-pressed(event) => {
            if (event.text == Key.Escape) {
                MainState.close();
                return accept;
            }

            if Navigation.key(event) {
                return accept;
            }

            reject
        }
    }

    init => { start(MainState.width, MainState.height) }

    VerticalLayout {
        width: root.width;
        spacing: 2px;

        Tabs {
            click() => {
                content.viewport-y = 0;
            }
        }

        if MainState.show-search: Search { }

        if MainState.show-preview && emoji-preview.has: Preview {
            emoji: emoji-preview.content;
        }

        HorizontalLayout {
            content := ListView {
                width: root.width;
                horizontal-scrollbar-policy: always-off;
                vertical-scrollbar-policy: always-off;

                for row in emojis: HorizontalLayout {
                    for emoji in row: Emoji {
                        emoji: emoji;
                        hover => {
                            emoji-preview.has = true;
                            emoji-preview.content = emoji;
                        }
                        click => {
                            EmojiHandle.click(emoji.character);
                        }
                    }
                }
            }
        }
    }
}
